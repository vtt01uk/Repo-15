var LocalStrategy   = require('passport-local').Strategy;
var OrgUser = require('../models/organisation');
var Sponsor = require('../models/sponsor');
var bCrypt = require('bcrypt-nodejs');

module.exports = function(passport){

    passport.use('signup', new LocalStrategy({
            passReqToCallback : true // allows us to pass back the entire request to the callback
        },
        function(req, username, password, done) {

            findOrCreateOrgUser = function(){
                // find a user in Mongo with provided username
                OrgUser.findOne({ 'username' :  username }, function(err, orguser) {
                    // In case of any error, return using the done method
                    if (err){
                        console.log('Error in SignUp: '+err);
                        return done(err);
                    }
                    // already exists
                    if (orguser) {
                        console.log('Organisation already exists with username: '+username);
                        return done(null, false, req.flash('message','User Already Exists'));
                    } else {
                        // if there is no user with that email
                        // create the user
                        var newOrgUser = new OrgUser();

                        // set the user's local credentials
                        newOrgUser.username = username;
                        newOrgUser.password = createHash(password);
                        newOrgUser.email = req.param('email');
                        newOrgUser.firstName = req.param('firstName');
                        newOrgUser.lastName = req.param('lastName');

                        // save the user
                        newOrgUser.save(function(err) {
                            if (err){
                                console.log('Error in Saving organisation: '+err);  
                                throw err;  
                            }
                            console.log('Organisation Registration succesful');    
                            return done(null, newOrgUser);
                        });
                    }
                });
            };
            // Delay the execution of findOrCreateUser and execute the method
            // in the next tick of the event loop
            process.nextTick(findOrCreateOrgUser);
        })
    );

    // Generates hash using bCrypt
    var createHash = function(password){
        return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
    }

}

module.exports = function(passport){

    passport.use('signup', new LocalStrategy({
            passReqToCallback : true // allows us to pass back the entire request to the callback
        },
        function(req, username, password, done) {

            findOrCreateSponsor = function(){
                // find a user in Mongo with provided username
                Sponsor.findOne({ 'username' :  username }, function(err, user) {
                    // In case of any error, return using the done method
                    if (err){
                        console.log('Error in SignUp: '+err);
                        return done(err);
                    }
                    // already exists
                    if (sponsor) {
                        console.log('User already exists with username: '+username);
                        return done(null, false, req.flash('message','Sponsor Already Exists'));
                    } else {
                        // if there is no user with that email
                        // create the user
                        var newSponsor = new Sponsor();

                        // set the user's local credentials
                        newSponsor.username = username;
                        newSponsor.password = createHash(password);
                        newSponsor.email = req.param('email');
                        newSponsor.firstName = req.param('firstName');
                        newSponsor.lastName = req.param('lastName');

                        // save the user
                        newSponsor.save(function(err) {
                            if (err){
                                console.log('Error in Saving user: '+err);  
                                throw err;  
                            }
                            console.log('User Registration succesful');    
                            return done(null, newSponsor);
                        });
                    }
                });
            };
            // Delay the execution of findOrCreateUser and execute the method
            // in the next tick of the event loop
            process.nextTick(findOrCreateSponsor);
        })
    );

    // Generates hash using bCrypt
    var createHash = function(password){
        return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
    }

}